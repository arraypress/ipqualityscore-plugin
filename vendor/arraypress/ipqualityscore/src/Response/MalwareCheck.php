<?php

declare( strict_types=1 );

namespace ArrayPress\IPQualityScore\Response;

/**
 * Malware Response Class
 *
 * Represents a response from the IPQualityScore Malware File Scanner API.
 */
class MalwareCheck extends Base {

	/**
	 * Get the file hash
	 *
	 * @return string|null
	 */
	public function get_file_hash(): ?string {
		return $this->data['file_hash'] ?? null;
	}

	/**
	 * Get the scan type (scan or lookup)
	 *
	 * @return string|null
	 */
	public function get_type(): ?string {
		return $this->data['type'] ?? null;
	}

	/**
	 * Get the scan status
	 *
	 * @return string|null
	 */
	public function get_status(): ?string {
		return $this->data['status'] ?? null;
	}

	/**
	 * Get the scan results
	 *
	 * @return array
	 */
	public function get_results(): array {
		return $this->data['result'] ?? [];
	}

	/**
	 * Get the update URL for checking scan status
	 *
	 * @return string|null
	 */
	public function get_update_url(): ?string {
		return $this->data['update_url'] ?? null;
	}

	/**
	 * Check if any malware was detected
	 *
	 * @return bool
	 */
	public function has_malware(): bool {
		$results = $this->get_results();
		foreach ( $results as $result ) {
			if ( isset( $result['detected'] ) && $result['detected'] === true ) {
				return true;
			}
		}

		return false;
	}

	/**
	 * Get count of detection engines that found threats
	 *
	 * @return int
	 */
	public function get_detection_count(): int {
		$count   = 0;
		$results = $this->get_results();
		foreach ( $results as $result ) {
			if ( isset( $result['detected'] ) && $result['detected'] === true ) {
				$count ++;
			}
		}

		return $count;
	}

	/**
	 * Get names of engines that detected threats
	 *
	 * @return array
	 */
	public function get_detecting_engines(): array {
		$engines = [];
		$results = $this->get_results();
		foreach ( $results as $result ) {
			if ( isset( $result['detected'], $result['name'] ) && $result['detected'] === true ) {
				$engines[] = $result['name'];
			}
		}

		return $engines;
	}

	/**
	 * Check if any engines encountered errors
	 *
	 * @return bool
	 */
	public function has_errors(): bool {
		$results = $this->get_results();
		foreach ( $results as $result ) {
			if ( isset( $result['error'] ) && $result['error'] === true ) {
				return true;
			}
		}

		return false;
	}

	/**
	 * Check if scan is completed
	 *
	 * @return bool
	 */
	public function is_completed(): bool {
		return $this->get_status() === 'completed';
	}

}